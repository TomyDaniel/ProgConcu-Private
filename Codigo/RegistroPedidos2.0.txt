import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock; // Importar ReentrantLock

public class RegistroPedidos {

    private final Map<EstadoPedido, List<Pedido>> pedidosPorEstado = new HashMap<>();
    private final AtomicInteger totalPedidosGenerados = new AtomicInteger(0);
    private final Random random = new Random();
    private final Lock reentrantLock = new ReentrantLock(); // Usar ReentrantLock

    public RegistroPedidos() {
        for (EstadoPedido estado : EstadoPedido.values()) {
            pedidosPorEstado.put(estado, new ArrayList<>());
        }
    }

    public boolean colasVacias() {
        reentrantLock.lock();
        try {
            return this.getCantidadInterno(EstadoPedido.PREPARACION) == 0 &&
                   this.getCantidadInterno(EstadoPedido.TRANSITO) == 0 &&
                   this.getCantidadInterno(EstadoPedido.ENTREGADO) == 0;
        } finally {
            reentrantLock.unlock();
        }
    }

    public void agregarPedido(Pedido pedido, EstadoPedido estado) {
        reentrantLock.lock();
        try {
            List<Pedido> lista = pedidosPorEstado.get(estado);
            if (lista != null) {
                lista.add(pedido);
            } else {
                System.err.println("Error: Lista no encontrada para el estado: " + estado);
            }
        } finally {
            reentrantLock.unlock();
        }
    }

    public boolean removerPedido(Pedido pedido, EstadoPedido estado) {
        reentrantLock.lock();
        try {
            List<Pedido> lista = pedidosPorEstado.get(estado);
            if (lista != null) {
                return lista.remove(pedido);
            }
            return false;
        } finally {
            reentrantLock.unlock();
        }
    }

    public Pedido obtenerPedidoAleatorio(EstadoPedido estado) {
        reentrantLock.lock();
        try {
            List<Pedido> lista = pedidosPorEstado.get(estado);
            if (lista == null || lista.isEmpty()) {
                return null;
            }
            int index = random.nextInt(lista.size());
            return lista.get(index);
        } finally {
            reentrantLock.unlock();
        }
    }

    private int getCantidadInterno(EstadoPedido estado) {
        // Este método asume que el lock ya está adquirido por el llamador
        List<Pedido> lista = pedidosPorEstado.get(estado);
        return (lista != null) ? lista.size() : 0;
    }

    public int getCantidad(EstadoPedido estado) {
        reentrantLock.lock();
        try {
            return getCantidadInterno(estado);
        } finally {
            reentrantLock.unlock();
        }
    }

    // ... métodos de totalPedidosGenerados sin cambios ...
}